{"components/common/treeview":"\r\n<script>\r\n/*\r\n * Treeview 1.4.2 - jQuery plugin to hide and show branches of a tree\r\n *\r\n * http://bassistance.de/jquery-plugins/jquery-plugin-treeview/\r\n *\r\n * Copyright JÃ¶rn Zaefferer\r\n * Released under the MIT license:\r\n *   http://www.opensource.org/licenses/mit-license.php\r\n */\r\n\r\n;(function($) {\r\n\r\n\t// TODO rewrite as a widget, removing all the extra plugins\r\n\t$.extend($.fn, {\r\n\t\tswapClass: function(c1, c2) {\r\n\t\t\tvar c1Elements = this.filter('.' + c1);\r\n\t\t\tthis.filter('.' + c2).removeClass(c2).addClass(c1);\r\n\t\t\tc1Elements.removeClass(c1).addClass(c2);\r\n\t\t\treturn this;\r\n\t\t},\r\n\t\treplaceClass: function(c1, c2) {\r\n\t\t\treturn this.filter('.' + c1).removeClass(c1).addClass(c2).end();\r\n\t\t},\r\n\t\thoverClass: function(className) {\r\n\t\t\tclassName = className || \"hover\";\r\n\t\t\treturn this.hover(function() {\r\n\t\t\t\t$(this).addClass(className);\r\n\t\t\t}, function() {\r\n\t\t\t\t$(this).removeClass(className);\r\n\t\t\t});\r\n\t\t},\r\n\t\theightToggle: function(animated, callback) {\r\n\t\t\tanimated ?\r\n\t\t\t\tthis.animate({ height: \"toggle\" }, animated, callback) :\r\n\t\t\t\tthis.each(function(){\r\n\t\t\t\t\tjQuery(this)[ jQuery(this).is(\":hidden\") ? \"show\" : \"hide\" ]();\r\n\t\t\t\t\tif(callback)\r\n\t\t\t\t\t\tcallback.apply(this, arguments);\r\n\t\t\t\t});\r\n\t\t},\r\n\t\theightHide: function(animated, callback) {\r\n\t\t\tif (animated) {\r\n\t\t\t\tthis.animate({ height: \"hide\" }, animated, callback);\r\n\t\t\t} else {\r\n\t\t\t\tthis.hide();\r\n\t\t\t\tif (callback)\r\n\t\t\t\t\tthis.each(callback);\r\n\t\t\t}\r\n\t\t},\r\n\t\tprepareBranches: function(settings) {\r\n\t\t\tif (!settings.prerendered) {\r\n\t\t\t\t// mark last tree items\r\n\t\t\t\tthis.filter(\":last-child:not(ul)\").addClass(CLASSES.last);\r\n\t\t\t\t// collapse whole tree, or only those marked as closed, anyway except those marked as open\r\n\t\t\t\tthis.filter((settings.collapsed ? \"\" : \".\" + CLASSES.closed) + \":not(.\" + CLASSES.open + \")\").find(\">ul\").hide();\r\n\t\t\t}\r\n\t\t\t// return all items with sublists\r\n\t\t\treturn this.filter(\":has(>ul)\");\r\n\t\t},\r\n\t\tapplyClasses: function(settings, toggler) {\r\n\t\t\t// TODO use event delegation\r\n\t\t\tthis.filter(\":has(>ul):not(:has(>a))\").find(\">span\").unbind(\"click.treeview\").bind(\"click.treeview\", function(event) {\r\n\t\t\t\t// don't handle click events on children, eg. checkboxes\r\n\t\t\t\tif ( this == event.target )\r\n\t\t\t\t\ttoggler.apply($(this).next());\r\n\t\t\t}).add( $(\"a\", this) ).hoverClass();\r\n\r\n\t\t\tif (!settings.prerendered) {\r\n\t\t\t\t// handle closed ones first\r\n\t\t\t\tthis.filter(\":has(>ul:hidden)\")\r\n\t\t\t\t\t\t.addClass(CLASSES.expandable)\r\n\t\t\t\t\t\t.replaceClass(CLASSES.last, CLASSES.lastExpandable);\r\n\r\n\t\t\t\t// handle open ones\r\n\t\t\t\tthis.not(\":has(>ul:hidden)\")\r\n\t\t\t\t\t\t.addClass(CLASSES.collapsable)\r\n\t\t\t\t\t\t.replaceClass(CLASSES.last, CLASSES.lastCollapsable);\r\n\r\n\t            // create hitarea if not present\r\n\t\t\t\tvar hitarea = this.find(\"div.\" + CLASSES.hitarea);\r\n\t\t\t\tif (!hitarea.length)\r\n\t\t\t\t\thitarea = this.prepend(\"<div class=\\\"\" + CLASSES.hitarea + \"\\\"/>\").find(\"div.\" + CLASSES.hitarea);\r\n\t\t\t\thitarea.removeClass().addClass(CLASSES.hitarea).each(function() {\r\n\t\t\t\t\tvar classes = \"\";\r\n\t\t\t\t\t$.each($(this).parent().attr(\"class\").split(\" \"), function() {\r\n\t\t\t\t\t\tclasses += this + \"-hitarea \";\r\n\t\t\t\t\t});\r\n\t\t\t\t\t$(this).addClass( classes );\r\n\t\t\t\t})\r\n\t\t\t}\r\n\r\n\t\t\t// apply event to hitarea\r\n\t\t\tthis.find(\"div.\" + CLASSES.hitarea).click( toggler );\r\n\t\t},\r\n\t\ttreeview: function(settings) {\r\n\r\n\t\t\tsettings = $.extend({\r\n\t\t\t\tcookieId: \"treeview\"\r\n\t\t\t}, settings);\r\n\r\n\t\t\tif ( settings.toggle ) {\r\n\t\t\t\tvar callback = settings.toggle;\r\n\t\t\t\tsettings.toggle = function() {\r\n\t\t\t\t\treturn callback.apply($(this).parent()[0], arguments);\r\n\t\t\t\t};\r\n\t\t\t}\r\n\r\n\t\t\t// factory for treecontroller\r\n\t\t\tfunction treeController(tree, control) {\r\n\t\t\t\t// factory for click handlers\r\n\t\t\t\tfunction handler(filter) {\r\n\t\t\t\t\treturn function() {\r\n\t\t\t\t\t\t// reuse toggle event handler, applying the elements to toggle\r\n\t\t\t\t\t\t// start searching for all hitareas\r\n\t\t\t\t\t\ttoggler.apply( $(\"div.\" + CLASSES.hitarea, tree).filter(function() {\r\n\t\t\t\t\t\t\t// for plain toggle, no filter is provided, otherwise we need to check the parent element\r\n\t\t\t\t\t\t\treturn filter ? $(this).parent(\".\" + filter).length : true;\r\n\t\t\t\t\t\t}) );\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\t// click on first element to collapse tree\r\n\t\t\t\t$(\"a:eq(0)\", control).click( handler(CLASSES.collapsable) );\r\n\t\t\t\t// click on second to expand tree\r\n\t\t\t\t$(\"a:eq(1)\", control).click( handler(CLASSES.expandable) );\r\n\t\t\t\t// click on third to toggle tree\r\n\t\t\t\t$(\"a:eq(2)\", control).click( handler() );\r\n\t\t\t}\r\n\r\n\t\t\t// handle toggle event\r\n\t\t\tfunction toggler() {\r\n\t\t\t\t$(this)\r\n\t\t\t\t\t.parent()\r\n\t\t\t\t\t// swap classes for hitarea\r\n\t\t\t\t\t.find(\">.hitarea\")\r\n\t\t\t\t\t\t.swapClass( CLASSES.collapsableHitarea, CLASSES.expandableHitarea )\r\n\t\t\t\t\t\t.swapClass( CLASSES.lastCollapsableHitarea, CLASSES.lastExpandableHitarea )\r\n\t\t\t\t\t.end()\r\n\t\t\t\t\t// swap classes for parent li\r\n\t\t\t\t\t.swapClass( CLASSES.collapsable, CLASSES.expandable )\r\n\t\t\t\t\t.swapClass( CLASSES.lastCollapsable, CLASSES.lastExpandable )\r\n\t\t\t\t\t// find child lists\r\n\t\t\t\t\t.find( \">ul\" )\r\n\t\t\t\t\t// toggle them\r\n\t\t\t\t\t.heightToggle( settings.animated, settings.toggle );\r\n\t\t\t\tif ( settings.unique ) {\r\n\t\t\t\t\t$(this).parent()\r\n\t\t\t\t\t\t.siblings()\r\n\t\t\t\t\t\t// swap classes for hitarea\r\n\t\t\t\t\t\t.find(\">.hitarea\")\r\n\t\t\t\t\t\t\t.replaceClass( CLASSES.collapsableHitarea, CLASSES.expandableHitarea )\r\n\t\t\t\t\t\t\t.replaceClass( CLASSES.lastCollapsableHitarea, CLASSES.lastExpandableHitarea )\r\n\t\t\t\t\t\t.end()\r\n\t\t\t\t\t\t.replaceClass( CLASSES.collapsable, CLASSES.expandable )\r\n\t\t\t\t\t\t.replaceClass( CLASSES.lastCollapsable, CLASSES.lastExpandable )\r\n\t\t\t\t\t\t.find( \">ul\" )\r\n\t\t\t\t\t\t.heightHide( settings.animated, settings.toggle );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.data(\"toggler\", toggler);\r\n\r\n\t\t\tfunction serialize() {\r\n\t\t\t\tfunction binary(arg) {\r\n\t\t\t\t\treturn arg ? 1 : 0;\r\n\t\t\t\t}\r\n\t\t\t\tvar data = [];\r\n\t\t\t\tbranches.each(function(i, e) {\r\n\t\t\t\t\tdata[i] = $(e).is(\":has(>ul:visible)\") ? 1 : 0;\r\n\t\t\t\t});\r\n\t\t\t\t$.cookie(settings.cookieId, data.join(\"\"), settings.cookieOptions );\r\n\t\t\t}\r\n\r\n\t\t\tfunction deserialize() {\r\n\t\t\t\tvar stored = $.cookie(settings.cookieId);\r\n\t\t\t\tif ( stored ) {\r\n\t\t\t\t\tvar data = stored.split(\"\");\r\n\t\t\t\t\tbranches.each(function(i, e) {\r\n\t\t\t\t\t\t$(e).find(\">ul\")[ parseInt(data[i]) ? \"show\" : \"hide\" ]();\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// add treeview class to activate styles\r\n\t\t\tthis.addClass(\"treeview\");\r\n\r\n\t\t\t// prepare branches and find all tree items with child lists\r\n\t\t\tvar branches = this.find(\"li\").prepareBranches(settings);\r\n\r\n\t\t\tswitch(settings.persist) {\r\n\t\t\tcase \"cookie\":\r\n\t\t\t\tvar toggleCallback = settings.toggle;\r\n\t\t\t\tsettings.toggle = function() {\r\n\t\t\t\t\tserialize();\r\n\t\t\t\t\tif (toggleCallback) {\r\n\t\t\t\t\t\ttoggleCallback.apply(this, arguments);\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\tdeserialize();\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"location\":\r\n\t\t\t\tvar current = this.find(\"a\").filter(function() {\r\n\t\t\t\t\treturn location.href.toLowerCase().indexOf(this.href.toLowerCase()) == 0;\r\n\t\t\t\t});\r\n\t\t\t\tif ( current.length ) {\r\n\t\t\t\t\t// TODO update the open/closed classes\r\n\t\t\t\t\tvar items = current.addClass(\"selected\").parents(\"ul, li\").add( current.next() ).show();\r\n\t\t\t\t\tif (settings.prerendered) {\r\n\t\t\t\t\t\t// if prerendered is on, replicate the basic class swapping\r\n\t\t\t\t\t\titems.filter(\"li\")\r\n\t\t\t\t\t\t\t.swapClass( CLASSES.collapsable, CLASSES.expandable )\r\n\t\t\t\t\t\t\t.swapClass( CLASSES.lastCollapsable, CLASSES.lastExpandable )\r\n\t\t\t\t\t\t\t.find(\">.hitarea\")\r\n\t\t\t\t\t\t\t\t.swapClass( CLASSES.collapsableHitarea, CLASSES.expandableHitarea )\r\n\t\t\t\t\t\t\t\t.swapClass( CLASSES.lastCollapsableHitarea, CLASSES.lastExpandableHitarea );\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tbranches.applyClasses(settings, toggler);\r\n\r\n\t\t\t// if control option is set, create the treecontroller and show it\r\n\t\t\tif ( settings.control ) {\r\n\t\t\t\ttreeController(this, settings.control);\r\n\t\t\t\t$(settings.control).show();\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\t\t}\r\n\t});\r\n\r\n\t// classes used by the plugin\r\n\t// need to be styled via external stylesheet, see first example\r\n\t$.treeview = {};\r\n\tvar CLASSES = ($.treeview.classes = {\r\n\t\topen: \"open\",\r\n\t\tclosed: \"closed\",\r\n\t\texpandable: \"expandable\",\r\n\t\texpandableHitarea: \"expandable-hitarea\",\r\n\t\tlastExpandableHitarea: \"lastExpandable-hitarea\",\r\n\t\tcollapsable: \"collapsable\",\r\n\t\tcollapsableHitarea: \"collapsable-hitarea\",\r\n\t\tlastCollapsableHitarea: \"lastCollapsable-hitarea\",\r\n\t\tlastCollapsable: \"lastCollapsable\",\r\n\t\tlastExpandable: \"lastExpandable\",\r\n\t\tlast: \"last\",\r\n\t\thitarea: \"hitarea\"\r\n\t});\r\n\t\r\n\t$(\"#navList-treeview\").treeview({\r\n\t\tcollapsed: true,\r\n\t\tanimated: \"medium\",\r\n\t\tcontrol:\"#sidetreecontrol\",\r\n\t\tpersist: \"location\"\r\n\t});\r\n\t\r\n})(jQuery);\r\n</script>\r\n"}
